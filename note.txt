[0.2 Introduction]
Redux: JavaScript(JS) application들의 상태를 관리하는 방법
Redux -> not dep to React

[1.1 Store and Reducer]
store: state를 저장하는 곳
reducer: data를 변경하는 함수
reducer가 반환하는 것이 application의 data가 됨
data가 기본적으로 한 곳에서만 변경할 수 있게 해줌! => Redux의 장점
컴포넌트 또는 모듈마다 산재한 데이터, 상태 관리를 한 곳에 모음으로써 협업, 유지보수가 효율적

[1.2 Actions]
action: redux에서 func를 부를 때 쓰는 두번째 param 혹은 argument => reducer과 소통할 수 있는 방법
STORE.dispatch()를 통해 action 메시지를 보낼 수 있음
action 메시지 형태 -> {key: value}  (e.g., {type: 'ADD'})

[1.3 Subscriptions]
subscribe: store 안에 있는 변화를 알 수 있게 해줌

[1.4 Recap Refactor]
reducer가 반환하는 것은 무엇이든지 app의 state가 됨
action은 object여야 됨! string은 안 됨
action은 반드시 type이 있어야 함
redux에서는 if else 보다 switch가 많음
reducer : 현재 상태의 application과 함께 불려지는 function (+ with action)
return하는 것은 application의 state가 됨

reducer : 현재 상태의 application과 함께 불려지는 function (+ with action). return하는 것은 application의 state가 됨
action : reducer와 소통하는 방법으로 Object여야 하며 그 key 이름은 항상 type임 (바꿀 수 없음)
dispatch : reducer에게 action을 보내는 방법
subscribe : store의 변화를 감지하면 인자값으로 준 함수를 실행

[2.0 Vanilla ToDo]
MUTATE state를 쓰지 말 것!

[2.1 State Mutation]
<Redux의 3원칙>
1. state는 single source of truth
2. state는 READ-ONLY. store를 수정할 수 있는 유일한 방법은 action을 보내는 방법 뿐임
2. state를 mutate하지 않는다. mutating state하는 대신에 new state object를 반환해야 됨
mutate는 state를 직접 변형하는 것!
3. 변화는 순수 함수(함수 내 변수 외에 외부의 값을 참조, 의존하거나 변경하지 않는 함수)로 작성되어야 함

[2.3 Delete To Do part Two]
mutate하면 해당 state의 주소는 같기 때문에 변경되었는지 알아볼 수 x => mutate하지 않고 새로운 state를 반환하는 것

[3.2 mapStateToProps]
connect: comp를 store에 연결해 줌
connect(state)(dispatch)
mapStateToProps(state, ownProps?)
mapStateToProps => Redux store로부터 무엇인가를 가져올 때 사용. 가져와서 component의 props에 추가함
function의 이름은 mapStateToProps여야 함

[3.3 mapDispatchToProps]
connect(mapStateToProps, mapDispatchToProps)
=> dispatch만 사용하고 싶다면 connect(null, mapDispatchToProps)

[4.0 Redux Toolkit]
redux-toolkit을 사용하면 더 적은 양의 redux 코드를 짤 수 있게 해줌

[4.1 createAction]
createAction은 action으로부터 받은 정보를 payload에 실어 보냄 (e.g., text, id)

[4.2 createReducer]
createReducer를 사용하면 state를 mutate할 수 있게 만들어 줌
redux-toolkit이 immer 아래에서 동작하기 때문에 mutate해도 실제로 redux-toolkit, immer 안에서는 새로운 state를 반환함!!
return을 하게 되면 무조건 새로운 state이어야 함 => mutate할 땐 return 하지 x

[4.3 configureStore]
configureStore() -> 사용하면 redux developer tools 확장 프로그램을 사용할 수 있음

[4.4 createSlice]
createSlice() => reducer & action 생성